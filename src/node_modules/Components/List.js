var proto = require('proto')

var Block = require('Block')
var Style = require("Style")

var Item = require("./Item");

module.exports = proto(Block, function(superclass) {

	// static properties

	this.Item = Item

    this.name = 'List'

	// instance properties

	this.init = function(/*[label,] [ordered,] listInit*/) {
		if(arguments[0] instanceof Array) {
            var listInit = arguments[0]
        } else {
            if(arguments[1] instanceof Array) {
                var listInit = arguments[1]
            } else if(arguments[2] instanceof Array) {
                var listInit = arguments[2]
            }

            if(typeof(arguments[0]) === 'boolean') {
                var ordered = arguments[0]
            } else {
                if(typeof(arguments[1]) === 'boolean') {
                    var ordered = arguments[1]
                } else {
                    var ordered = false // default
                }

                if(typeof(arguments[0]) === 'string') {
                    var label = arguments[0]
                }
            }
        }

        if(ordered) {
            var type = 'ol'
        } else {
            var type = 'ul'
            this.defaultStyle = Style({
                listStyleType: 'decimal'
            })
        }


        this.domNode = document.createElement(type) // do this before calling the superclass constructor so that an extra useless domNode isn't created inside it
        superclass.init.call(this) // superclass constructor
        this.label = label

        if(listInit !== undefined) {
            for(var n=0; n<listInit.length; n++) {
                this.item(listInit[n])
            }
        }
	}

	this.item = function() {
		var item = Item.apply(this, arguments)
        this.add(item)
        return item
	}
});